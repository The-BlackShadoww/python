# Immutable data types: Immutable objects can not be modified after their creation.

1 - Integers
2 - Floating numbers
3 - Strings
4 - Tuples
5 - Frozen sets

# Mutable data type: Mutable objects can be modified after their creation

1 - Lists
2 - Dictionaries
3 - Sets

# Type conversion-
    - Explicit = int(), float(), str() - We do the conversion forcefully
    - Implicit
        x  = 3.14
        y = 2
        z= x + y 
        here the value of z will be float automatically we don't convert forcefully

# Strings - Strings in python are sequences of characters enclosed within quotes
    - Single Quotes ('')
        - for short Strings
        - for string with double quotes
    - Double Quotes ("")
        - for short and long Strings
        - for string with single quotes
    - Triple Quotes (''')
        - for multiline strings or docstring
        - for string itself contains double quotes.
    - Triple Double Quotes (""")
        - for multiline strings or docstring
        - for string itself contains single quotes.

# String Indexing
    - Positive indexing 0, 1, 2, 3 ....
    - Negative indexing -1, -2, -3 ....

# String Slicing
    - start
    - stop
    - step
    - Use Cases :
        - Extracting Substring
        - Reversing String
        - Manipulating
        - Parsing data
        - Validation and Formatting
        - Analyzing data
        - Cleaning data

# String Repetition

# String Concatenation
    - Using the + operator
    - join() method
    - format() method
    - % Formatting
    - Use cases:
        - Building Dynamic messages
        - URL constructions
        - File paths
        - Template strings
        - Data Formatting
        - Generating patterns
        - Formatting, Initialization
        - Creating repeated messages

# String Methods
    - Convert to uppercase
    - convert to lowercase
    - Capitalize the first letter
    - Title case 
    - Swap case
    - Replace a Substring
    - Split the string into a Lists
    - Join a list into a string
    - Strip whitespace from both end 
    - Remove leading whitespace
    - Remove trailing whitespace
    - Checking and Counting
        - Check if string starts with a Substring
        - Check if string ends with a Substring
        - find the position of a Substring
        - Count occurrences of a Substring
        - Check if all characters are alphanumeric
        - Check if all characters are alphabetic
        - Check if all characters are digits
        - Check if the string contains only whitespace
        - Check if the string is title cased
    - Use cases:
        - Data Cleaning, Formatting
        - Text Analysis
        - User Input Processing
        - Generating Dynamic text

# Numbers and Math
    - Basic Arithmetic Operations
    - Type conversion
        - int -> float
        - float -> int
        - complex
    - Use cases
        - Financial Calculations
        - Data Analysis
        - Graphics and Gaming
        - Unit conversion
    - Maths
        - Square root
        - Power
        - Trigonometric functions
        - Logarithmic functions
        - Factorial
        - Absolute value
        - Floor and Ceiling
        - Constants
        - GCM: Greatest Common Divisor
        - LCM: Least Common Multiple
        - Use Cases:
            - Engineering
            - Scientific Computing
            - Data Analysis
            - Math Problem Solve
            - Financial
            - Game Development
        - Operator Precedence sequence
            - Exponential **
            - Unary Plus, Unary minus, Bitwise NOT (+x, -x, ~x)
            - Multiplication, Division, Floor Division, Modulus (*, /, //, %)
            - Addition, Subtraction (+, -)
            - Bitwise shift (<<, >>)
            - Bitwise AND (&)
            - Bitwise XOR (^)
            - Bitwise OR (|)
            - Comparisons, Identity, Membership (==, !=, >, <, >=, <=, is, is not, in, not in)
            - Logical NOT (not)
            - Logical AND (and)
            - Logical OR (or)
            - Use Cases:
                - Mathematical Expressions
                - Data Analysis
                - Programming Logic
                - Financial Calculations

# Control Flow
    - if, elif, else
        - Use Cases:
            - User Authentication
            - Form Validation
            - Payment Processing
            - Data Filtering
            - Weather Forecasting
            - Inventory Management
            - et...
    - For Loop
        - loop over Lists
        - loop over string
        - loop over range
        - loop over Dictionaries
        - use of break and continue
        - Use Cases:
            - Web Scaping
            - Simulation
            - Building user Interfaces
            - Matrix Operations
            - Iterating Over Dictionaries
            - Batch Processing
            - UI Element Generating
    - While Loop
        - Same as For Loop

    - \\ Note \\: In python, there are for and while loops, but there is no direct equivalent to the do-while loop found in some other Programming Languages like Javascript. Also, there is no for in, for of, or forEach loop syntax specifically like in Javascript.

    - Logical operators
        - Logical and operator (and)
        - Logical or operator (or)
        - Logical not operator (not)
        - Use Cases:
            - Monitoring and Alerts
            - Configurations Management
            - E-commerce
            - Data Filtering
            - Search
            - Input
            - Access
    - Comparison operators
        - ==, !=, >, >=, <, <=
        - Use cases: almost everywhere

# Lists
    - Ordered
    - Mutable
    - Allow duplicate values
    - Heterogeneous
    - Dynamic size
    - Methods:
        - append() 
        - remove()
        - index()
        - insert()
        - pop()
        - extend()
        - clear()
        - count()
        - sort()
        - reverse()
        - copy()
        - len() => len(list)
    - List Slicing 
        - list[start:end]
    - Use cases:
        - Storing user data
        - Managing to-do Lists
        - Processing Orders
        - Collecting surveys
        - etc...

# Tuples
    - Ordered
    - Allow duplicate values
    - Heterogeneous
    - Fixed size
    - Immutable
    - Methods:
        - count()
        - index()
    - converting to list
        - list(Tuples)
    - Use cases:
        - Immutable data storage
        - Return Multiple values
        - Fixed Collections
        - Database Records

# Sets
    - Unordered
    - Mutable
    - No duplicates
    - Heterogeneous
    - Dynamic size
    - Methods:
        - add()
        - remove()
        - update()
        - clear()
        - union()
        - intersection()
        - difference()
        - symmetric_difference()
        - issubset()
        - issuperset()
    - Use Cases:
        - Removing duplicates
        - Mathematical Set Operations
        - Filtering Data
        - Graph
        - Data structures

# Dictionary
    - Unordered
    - Mutable
    - Key uniqueness
    - Heterogeneous
    - Methods:
        - get()
        - keys()
        - values()
        - items()
        - pop()
        - update()
        - clear()
    - Use cases:
        - Storing Configurations settings
        - Fast lookups
        - String JSON data
        - Organizing Data
        - Database Records
        - Nested data structures
        - etc...

# Function
    - Features:
        - Parameters
        - Required parameters
        - Default parameters
        - arguments
        - Variable-Length arguments (*args) (Tuples)
        - Keyword arguments (`kwargs) (Dictionary)
        - Return single value
        - Return Multiple values
        - Return Nothing
        - Return list
        - Return Dictionary
        - Early exit return*
    - Lambda functions
        - small, anonymous, inline
        - lambda keyword
        - simple lambda function
        - lambda function parameters
        - lambda function simple conditions
        - Use cases:
            - simple functions
            - functions that are not reused.
            - Inline use
            - Readability
        - When not to use
            - For complex functions
            - For Reusability
    - Variable scope
        - Local Variable
        - Global Variable
        - Local and Global Variable with the same name
        - Modifying Global Variable Inside a Function with `global` keyword
    - Use cases:
        - Code Reusability
        - Modular Programming
        - Data Processing
        - Event Handling
        - API Interactions
        - Automation
        - Testing
        - Validation
        - etc...

# Files
    - Create
    - Write
    - Read 
    - Renaming
    - Delete/Remove

# Directories
    - Create
    - Write
    - Read 
    - Renaming
    - Delete/Remove
    - Read file names from a directory and print list

# Zip Files
    - Create
    - Extract
    - Make zip from a directory

# CSV file
    - Create
    - Read

# Exceptions and Error handling 
    - simple/single error
    - multiple error
    - Finally block

# JSON
    - json.dumps() python objet --> json string
    - json.loads() JSON string --> python objet
    - json.dump()  python objet --> json string --> File write
    - json.load()  JSON File read --> python object --> JSON String

# Date and Time

# OOP
    - What is OOP?
        - Rules for writing reuseable code
    - Key Features:
        - Class
        - Object
        - Attributes
        - Methods
        - Inheritance
        - Encapsulation
        - Polymorphism
    - Constructors:
        - Constructors are special Methods
        - Automatically called when and object of a class is created.
        - Constructor method is always named __init__
        - Constructor method doesn't return any value
    - Static Properties
    - Abstract class nad Methods
    - method overriding
    - method overloading
    - Access modifiers
        - control the visibility and accessibility of class attributes and methods
        - not like Java or C++
        - it uses naming conventions to indicate access levels
        - Public/Private/Protected
    - Getters
        - Method According To The Name
        - Decorator @property
    - Setters
        - Method According To The Name
        - @VariableName.setter
    - Encapsulation
        - Keeping all the related code together
        - Why needed?
            - Data protection
            - Controlled Access
            - Modularity
    - Polymorphism
        - It means Multiple use cases or characters
        - Overriding, overloading
        - Compile-time Polymorphism - its not something built-in in python
            - overloading
        - Runtime Polymorphism - its something built-in in python
            - Overriding
    - Use cases:
        - Reusability
        - Real-World Entitles
        - Encapsulation
        - Inheritance for Reusability and Extensibility
        - Polymorphism for Flexibility
        - Design Patterns
        - APIs and Web Services
        - Database Interactions
        - etc...

# Python Modules
    - A python module is a file containing python code ,such as functions, variables, and classes, 
    - can be imported and used in other python scripts or interactive sessions.
    - Modules allow for code reuse, organization, and separation of concerns
    - Built-in Modules
        - math module
        - os module
        - sys module --> gives access to variables and functions interacting with the python runtime environment
        - datetime module
        - random module
        - time module
        - JSON module
        - http module (most important)
        - subprocess module
        - hashlib module
        - csv module
    - custom single file module
    - custom Multi-file/package module
        - package name = folder name = Namespace
        - __init__.py
    - pip

# Pythonic Idioms & Comprehensions
    - Comprehensions are shortcuts for creating new lists, dictionaries, or sets without writing    full for loops
    - Idioms are smart, clean, and commonly accepted ways of doing things in Python — sort of like “best practice shortcuts.”

# Decorators (Advance)
    - A decorator is like a wrapper that adds extra behavior to a function — without changing its actual code.
    - Order matters when using multiple decorators

# Iterators
    - An iterator is an object that lets you loop through something — one item at a time.
    - key methods: __iter__(), __next__()

# Generators
    - A generator is a special type of function that remembers where it left off and can yield values one at a time, instead of returning them all at once.
    - keyword --> yield
    - Use cases
        - Read Big File
        - infinite streams,
        - pipelines, 
        - async tasks

# Asynchronous Programming (async/await)

# Regular Expressions

# Static typing
